%% This script is used to obtain the results for GP-Huber on Friedman dataset 
Note: For the bar plots on Friedman 
clc 
clear all

run('MakeFriedman.m')
clearvars -except yTrain XTrain XTest fTest

nfolds=10;
modelmax=4;
Results=zeros(modelmax,4,nfolds);

pl = prior_t();
pm = prior_sqrtunif();
pn = prior_logunif();
n=100;
rng("default")
for i=1:n
%     noise(i,1)=1*normrnd(0.01,0.08,1,1);     %Uncomment for Normal noise
%     noise(i,1)=0.1*trnd(10,1,1);             %Uncomment for Student-t noise with nu=10
%     noise(i,1)=0.1*laprnd(1,1,0,1);          %Uncomment for Laplace noise
    noise(i,1)=0.1*trnd(1,1,1);                %Uncomment for Student-t noise with nu=1 (Cauchy)
end
out_idx=[7; 8; 9; 10; 11;15;61;70];
out_idx_b=[21,22,23,24,25,26];
no1=10+randn(length(out_idx_b),1);  %bad leverage
no2=10+randn(length(out_idx_b),1);

% adding vertical outliers
% x(out_idx)=[2.51; 2.52; 2.53; 2.54; 2.55];

% 
% % adding bad leverage points
% 
% % x(out_idx+6)=[2.7;2.7 ; 2.7; 2.7; 2.7];

% % y(out_idx)=[10;10;10;10;10];
y=y+noise;

for fold=1:nfolds
filename = sprintf('C:/Users/palgikar/Documents/MATLAB/AOAS/FriedmanFold%d',fold);
load(filename) 
xt=XTest;
yt=fTest;
x=XTrain;
y=yTrain;
y=y+noise;
% adding vertical outliers and noise 
y(out_idx)=10*ones(length(out_idx),1);
[n nin]=size(x);
out_idx_b=[21,22,23,24,25,26];
x(out_idx_b,5)=10+no1; %bad leverage
% x(out_idx_b,2)=10+no2;  %masking bad leverage bad leverage






%% Model 4
% ========================================
% MCMC approach with Huber observation noise model
% Here we sample all the variables 
%     (lengthScale, magnSigma, sigma(noise-t) and nu)
% ========================================
weights=zeros();
 b=0.5;
 X=x;
 c1=1+5/(length(X(:,1))-length(X(1,:)));
 H=[ones(length(X(:,1)),1) X];
%  H=[X y];
 [P,PS]=projectionstatistics(H);
 [m n]=size(X);
  for i=1:m
   niu=sum(H(i,:)~=0);
   cuttoff_PS(i,1)=chi2inv(0.975,niu);
   weights(i,1)=min(1,(cuttoff_PS(i,1)/PS(i)^2)); %% downweight the outliers or leverage points
  end

gpcf = gpcf_sexp('lengthScale', llll, 'magnSigma2', 0.1, ...
                  'lengthScale_prior', pl, 'magnSigma2_prior', pm);

% Create the likelihood structure
lik = lik_huber('sigma2', 0.2^2, 'sigma2_prior', pn,'weights',weights) %,'b',1.5,'epsilon',0.45);

% ... Finally create the GP structure
gp = gp_set('lik', lik, 'cf', gpcf, 'jitterSigma2', 1e-9, ...
             'latent_method', 'MCMC');
f=gp_pred(gp,x,y,x);
gp=gp_set(gp, 'latent_opt', struct('f', f));

% Sample 
[rgp,g,opt]=gp_mc(gp, x, y, 'nsamples', 400, 'display', 20);
rr = thin(rgp,100,2);

% make predictions for test set
[Eft, Varft] = gp_pred(rr,x,y,xt);
std_ft = sqrt(Varft);
model=4;
Results(model,1,fold) = 1 - var(Eft-yt)/var(yt);
Results(model,2,fold) = sqrt(mean((Eft-yt).^2));
Results(model,3,fold) = mean(abs(Eft-yt));
Results(model,4,fold) = NLP(Eft,Varft, yt);

%% Model 5

disp(['Huber     noise model using Laplace integration over the '; ...
      'latent values and MAP estimate for the parameters        '])

gpcf = gpcf_sexp('lengthScale', llll, 'magnSigma2', 0.1, ...
                  'lengthScale_prior', pl, 'magnSigma2_prior', pm);


% Create the likelihood structure
% lik = lik_huber('sigma2', 0.2^2, 'sigma2_prior', pn,'weights',weights,'b',0.5,'epsilon',0.45);
lik = lik_huber('sigma2', 0.2^2, 'sigma2_prior', pn,'weights',weights); %,'b',1.5,'epsilon',0.45);
% ... Finally create the GP structure
gp = gp_set('lik', lik, 'cf', gpcf, 'jitterSigma2', 1e-9, ...
            'latent_method', 'Laplace');

% Set the options for the optimization
opt=optimset('TolFun',1e-3,'TolX',1e-3);
% Optimize with the scaled conjugate gradient method
gp=gp_optim(gp,x,y,'opt',opt,'loss','loo');

[Eft, Varft] = gp_pred(gp, x, y, xt);
std_ft = sqrt(Varft);

model=5;
Results(model,1,fold) = 1 - var(Eft-yt)/var(yt);
Results(model,2,fold) = sqrt(mean((Eft-yt).^2));
Results(model,3,fold) = mean(abs(Eft-yt));
Results(model,4,fold) = NLP(Eft,Varft, yt);

end



